# Default values for trino.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: trinodb/trino
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart version.
  # Same value as Chart.yaml#appVersion
  tag: 434

imagePullSecrets:
  - name: registry-credentials

server:
  workers: 2
  node:
    environment: production
    dataDir: /data/trino
    pluginDir: /usr/lib/trino/plugin
  log:
    trino:
      level: INFO
  config:
    path: /etc/trino
    http:
      port: 8080
    https:
      enabled: false
      port: 8443
      keystore:
        path: ""
    node-scheduler:
      include-coordinator: true
    # Trino supports multiple authentication types: PASSWORD, CERTIFICATE, OAUTH2, JWT, KERBEROS
    # For more info: https://trino.io/docs/current/security/authentication-types.html
    authenticationType: ""
    query:
      maxMemory: "4GB"
  exchangeManager:
    name: "filesystem"
    baseDir: "s3://ducnt18-exchange-spooling-bucket-1"
  workerExtraConfig: ""
  coordinatorExtraConfig: ""
  autoscaling:
    enabled: true
    maxReplicas: 7
    targetCPUUtilizationPercentage: 60

accessControl: {}
  # type: configmap
  # refreshPeriod: 60s
  # # Rules file is mounted to /etc/trino/access-control
  # configFile: "rules.json"
  # rules:
  #   rules.json: |-
  #     {
  #       "catalogs": [
  #         {
  #           "user": "admin",
  #           "catalog": "(mysql|system)",
  #           "allow": "all"
  #         },
  #         {
  #           "group": "finance|human_resources",
  #           "catalog": "postgres",
  #           "allow": true
  #         },
  #         {
  #           "catalog": "hive",
  #           "allow": "all"
  #         },
  #         {
  #           "user": "alice",
  #           "catalog": "postgresql",
  #           "allow": "read-only"
  #         },
  #         {
  #           "catalog": "system",
  #           "allow": "none"
  #         }
  #       ],
  #       "schemas": [
  #         {
  #           "user": "admin",
  #           "schema": ".*",
  #           "owner": true
  #         },
  #         {
  #           "user": "guest",
  #           "owner": false
  #         },
  #         {
  #           "catalog": "default",
  #           "schema": "default",
  #           "owner": true
  #         }
  #       ]
  #     }

additionalNodeProperties: {}

additionalConfigProperties:
  retry-policy: retry-policy=TASK

additionalLogProperties: {}

additionalExchangeManagerProperties:
  exchange-s3-region: exchange.s3.region=ap-southeast-1
  exchange-s3-aws-access-key: exchange.s3.aws-access-key= '''' add access key
  exchange-s3-aws-secret-key: exchange.s3.aws-secret-key=  '''''' add secret
  exchange-s3-endpoint: exchange.s3.endpoint=https://s3.ap-southeast-1.amazonaws.com

eventListenerProperties: {}

additionalCatalogs: {}

# Array of EnvVar (https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvar-v1-core)
env: []

# Array of EnvFromSource (https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envfromsource-v1-core)
envFrom: []

initContainers: {}
  # coordinator:
  #   - name: init-coordinator
  #     image: busybox:1.28
  #     imagePullPolicy: IfNotPresent
  #     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  # worker:
  #   - name: init-worker
  #     image: busybox:1.28
  #     command: ['sh', '-c', 'echo The worker is running! && sleep 3600']

sidecarContainers: {}
#   coordinator:
#     - name: side-coordinator
#       image: busybox:1.28
#       imagePullPolicy: IfNotPresent
#       command: ['sleep', '1']
#   worker:
#     - name: side-worker
#       image: busybox:1.28
#       imagePullPolicy: IfNotPresent
#       command: ['sleep', '1']

securityContext:
  runAsUser: 1000
  runAsGroup: 1000

shareProcessNamespace:
  coordinator: false
  worker: false

service:
  type: NodePort
  port: 8080

auth: {}
  # Set username and password
  # https://trino.io/docs/current/security/password-file.html#file-format
  # passwordAuth: "username:encrypted-password-with-htpasswd"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: aws-load-balancer-controller
  # Annotations to add to the service account
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: intance
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:828524833368:certificate/572c2e22-8444-4fba-b73b-972134c39f9e
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/security-groups: sg-027d2f70ac130a445, sg-0e65939601984fa86

secretMounts: []

coordinator:
  jvm:
    maxHeapSize: "3G"
    gcMethod:
      type: "UseG1GC"
      g1:
        heapRegionSize: "32M"

  config:
    memory:
      heapHeadroomPerNode: ""
    query:
      maxMemoryPerNode: "1GB"

  additionalJVMConfig: {}

  additionalExposedPorts: {}
    # - name: trino
    #   servicePort: 80
    #   port: 80
    #   protocol: TCP
    #   nodePort: 30007

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    requests:
      cpu: 2000m
      memory: 4Gi

  livenessProbe: {}
    # initialDelaySeconds: 20
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1
  readinessProbe: {}
    # initialDelaySeconds: 20
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1

  nodeSelector:
    application/type: trino

  tolerations: []

  affinity: {}

  additionalConfigFiles: {}

  annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/target-type: instance
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:828524833368:certificate/572c2e22-8444-4fba-b73b-972134c39f9e
      # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
      alb.ingress.kubernetes.io/security-groups: sg-027d2f70ac130a445, sg-0e65939601984fa86

  labels: {}

worker:
  jvm:
    maxHeapSize: "3G"
    gcMethod:
      type: "UseG1GC"
      g1:
        heapRegionSize: "32M"

  config:
    memory:
      heapHeadroomPerNode: ""
    query:
      maxMemoryPerNode: "1GB"
    node-scheduler:
      include-coordinator: true

  additionalJVMConfig: {}

  additionalExposedPorts: {}
    # - name: trino
    #   servicePort: 80
    #   port: 80
    #   protocol: TCP
    #   nodePort: 30007

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    requests:
      cpu: 2000m
      memory: 4Gi

  livenessProbe: {}
    # initialDelaySeconds: 20
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1
  readinessProbe: {}
    # initialDelaySeconds: 20
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1

  nodeSelector:
    application/type: trino

  tolerations: []

  affinity: {}

  additionalConfigFiles: {}

  annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/target-type: instance
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:828524833368:certificate/572c2e22-8444-4fba-b73b-972134c39f9e
      # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
      alb.ingress.kubernetes.io/security-groups: sg-027d2f70ac130a445, sg-0e65939601984fa86

  labels: {}


kafka:
  mountPath: "/etc/trino/schemas"
  tableDescriptions: {}
    # Custom kafka table descriptions that will be mounted in mountPath
    # testschema.json: |-
    #   {
    #     "tableName": "testtable",
    #     "schemaName": "testschema",
    #     "topicName": "testtopic",
    #     "key": {
    #       "dataFormat": "json",
    #       "fields": [
    #         {
    #           "name": "_key",
    #           "dataFormat": "VARCHAR",
    #           "type": "VARCHAR",
    #           "hidden": "false"
    #         }
    #       ]
    #     },
    #     "message": {
    #       "dataFormat": "json",
    #       "fields": [
    #         {
    #           "name": "id",
    #           "mapping": "id",
    #           "type": "BIGINT"
    #         },
    #         {
    #           "name": "test_field",
    #           "mapping": "test_field",
    #           "type": "VARCHAR"
    #         }
    #       ]
    #     }
    #   }
commonLabels: {}  # Labels that get applied to every resource's metadata
ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:828524833368:certificate/572c2e22-8444-4fba-b73b-972134c39f9e
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/security-groups: sg-027d2f70ac130a445, sg-0e65939601984fa86
  hosts:
   - host: ""
     paths:
       - path: /
         pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# eksctl create iamserviceaccount \
#      --cluster=analytics-non-prod-eks \
#      --region=ap-southeast-1 \
#      --namespace=test-trino \
#      --name=aws-load-balancer-controller \
#      --attach-policy-arn=arn:aws:iam::828524833368:policy/AWSLoadBalancerControllerIAMPolicy \
#      --override-existing-serviceaccounts \
#      --approve \
#      --profile MSBDataScientists-828524833368